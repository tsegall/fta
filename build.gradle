apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: "com.github.ben-manes.versions"

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath "com.github.ben-manes:gradle-versions-plugin:0.27.0"
  }
}

mainClassName = "com.cobber.fta.driver.Driver"

group = "com.cobber.fta"
archivesBaseName = "fta"
version = "2.3.40"

repositories {
  mavenCentral()
}

test {
  // enable TestNG support (default is JUnit)
  useTestNG()
  dependsOn cleanTest
  testLogging.showStandardStreams = true
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

tasks.withType(Test) {
  systemProperty "file.encoding", "UTF-8"
}

javadoc.options.encoding = 'UTF-8'

java {
    withSourcesJar()
    withJavadocJar()
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
  repositories {
    mavenDeployer {
      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Fast Text Analyzer'
        packaging 'jar'
        // optionally artifactId can be defined here 
        description 'Analyze Text data to determine simple type and Semantic type information as well as other key metrics associated with a text stream.'
        url 'https://github.com/tsegall/fta'

        scm {
          connection 'scm:git:https://github.com/tsegall/fta.git'
          developerConnection 'scm:git:https://github.com/tsegall/fta.git'
          url 'https://github.com/tsegall/fta.git'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'tsegall'
            name 'Tim Segall'
            email 'xtim@cobber.com'
          }
        }
      }
    }
  }
}

dependencies {
  // https://mvnrepository.com/artifact/com.univocity/univocity-parsers
  implementation group: 'com.univocity', name: 'univocity-parsers', version: '2.8.4'
  // https://mvnrepository.com/artifact/javax.mail/javax.mail-api
  implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
  // https://mvnrepository.com/artifact/commons-validator/commons-validator
  implementation group: 'commons-validator', name: 'commons-validator', version: '1.6'
  // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.2'
  // https://mvnrepository.com/artifact/com.googlecode.libphonenumber/libphonenumber
  implementation group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '8.11.1'
  // https://mvnrepository.com/artifact/org.apache.commons/commons-text
  implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'
  // https://mvnrepository.com/artifact/org.testng/testng
  testImplementation group: 'org.testng', name: 'testng', version: '7.1.0'
}

distributions {
    main {
        distributionBaseName = 'fta'
    }
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("${buildDir}/reports/coverage")
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/Driver**'])
        })
    }
}
