plugins {
	id "com.github.ben-manes.versions"
}

wrapper {
	gradleVersion = '8.14'
}

tasks.register('examples.clean') {
    dependsOn gradle.includedBuilds*.task(':clean')
}

tasks.register('examples.build') {
    dependsOn gradle.includedBuilds*.task(':build')
}

tasks.register('examples.run') {
    dependsOn gradle.includedBuilds*.task(':run')
}

subprojects {
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}

	apply plugin: 'eclipse'
	apply plugin: 'jacoco'
	apply plugin: 'java-library-distribution'
	apply plugin: 'signing'
	apply plugin: 'maven-publish'

	version = libs.versions.fta.get()
	group = "com.cobber.fta"

	compileJava {
	    options.release = 11
	    options.compilerArgs.add("-Xlint:unchecked")
	}

	java {
		withSourcesJar()
		withJavadocJar()
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	jacoco {
		toolVersion = libs.versions.jacoco.get()
	}

	jacocoTestReport {
		dependsOn test
		reports {
			xml.required = true
		}
	}

	artifacts {
		archives javadocJar, sourcesJar
	}

	jar {
		manifest {
			attributes(
				'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
				'Implementation-Version': archiveVersion
			)
		}
	}

	javadoc {
		options.encoding = "UTF-8"
		options.noQualifiers 'java.lang:java.util:com.cobber.fta:com.cobber.fta.core'
	}


	test {
		// enable TestNG support (default is JUnit)
		def groups = System.getProperty('groups', 'all')
			useTestNG() {
				includeGroups groups
			}
		dependsOn cleanTest
		testLogging.showStandardStreams = true
		maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	}

	publishing {
		repositories {
			maven {
				name = "ossrh"
				url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
				credentials {
					username = findProperty('ossrhUsername')
					password = findProperty('ossrhPassword')
				}
			}
		}

		publications {
			mavenJava(MavenPublication) {
			    switch(artifactId) {
				case 'core':
					artifactId = 'fta-core'
					break
				case 'types':
					artifactId = 'fta'
					break
				default:
					break
				}
				from components.java

				pom {
					name = 'Fast Text Analyzer'
					packaging = 'jar'
					description = 'Analyze Text data to determine simple type and Semantic type information as well as other key metrics associated with a text stream.'
					url = 'https://github.com/tsegall/fta'

					scm {
					    connection = 'scm:git:https://github.com/tsegall/fta.git'
					    developerConnection = 'scm:git:https://github.com/tsegall/fta.git'
					    url = 'https://github.com/tsegall/fta.git'
					}

				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}

				developers {
					developer {
						id = 'tsegall'
						name = 'Tim Segall'
						email = 'xtim@cobber.com'
					}
				}
			    }
			}
		}
	}

	signing {
		def signingKey = findProperty("signingKey")
		def signingPassword = findProperty("signingPassword")
		useInMemoryPgpKeys(signingKey, signingPassword)
		sign publishing.publications.mavenJava
	}
}
